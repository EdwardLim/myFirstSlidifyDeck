setwd("~/R")
library(dplyr)
install.packages(c("caret", "dplyr"))
library(ggplot2)
library(caret)
library(dplyr)
library(swirl)
install.packages("swirl")
str(mtcars)
PredictMPGModel <- lm(mpg ~ weight, data=mtcars)
attach(mtcars)
PredictMPGModel <- lm(mpg ~ weight, data=mtcars)
PredictMPGModel <- lm(mpg ~ wt + am, data=mtcars)
PredictMPGModel
summary(PredictMPGModel)
predict(PredictMPGModel, wt=5, am = 0)
res1 = predict(PredictMPGModel, wt=5, am = 0)
res1 = predict(PredictMPGModel, wt=5, am = 1)
res1
x = c(1, 2)
x
as.data.frame(x)
y = as.data.frame(x)
y
str(y)
names(y)
str(y)
names(y)
str(y)
View(y)
PredictMPGModel <- lm(mpg ~ wt, data=mtcars)
predict(PredictMPGModel, as.data.frame(3))
df <- data.frame(3,names=c("wt"))
df
str(df)
View(df)
names(df)
names(df) = 'wi'
names(df) = 'wt'
df = as.data.frame(3)
names(df) = 'wt'
predict(PredictMPGModel, df
)
data.frame(1,2,3)
df = data.frame(1,2,3)
?"data.frame"
?as.data.frame
library(shiny)
installed.packages()
install.packages("shiny")
library(shiny)
PredictMPGModel <- lm(mpg ~ cyl + hp + wt + am, data=mtcars)
MPGModel <- lm(mpg ~ cyl + hp + wt + am, data=mtcars)
MPGModel <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
str(mtcars)
newdf <- data.frame(wt = 3, hp = 110, cyl = 4, am = 0)
MPGPredict <- predict(MPGModel, newdf)
MPGPredict
newdf <- data.frame(wt = 3, hp = 110, cyl = 4, am = 1)
MPGPredict <- predict(MPGModel, newdf)
MPGPredict
newdf <- data.frame(wt = 3, hp = 110, cyl = 6, am = 1)
MPGPredict <- predict(MPGModel, newdf)
MPGPredict
newdf <- data.frame(wt = 3, hp = 300, cyl = 6, am = 1)
MPGPredict <- predict(MPGModel, newdf)
MPGPredict
newdf <- data.frame(wt = 5, hp = 300, cyl = 6, am = 1)
MPGPredict <- predict(MPGModel, newdf)
MPGPredict
data("mtcars")
data(mtcars)
data(mtcars)
str(mtcars)
data(mtcars)
# Make cyl (number of cylinders) and am (manual transmission=0, auto tranmission=1)
# into factors
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
# Train a regression model to predict MPG from
# - wt (weight in tons)
# - hp (horsepower)
# - cyl (number of cylinders)
# - am (manual transmission=0, auto tranmission=1)
MPGModel <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
predict(MPGModel, data.frame(wt=3, hp=3, cyl=4, am=0))
predict(MPGModel, data.frame(wt=3, hp=3, cyl=as.factor(4), am=as.factor(0)))
predict(MPGModel, data.frame(wt=3, hp=3, cyl=as.factor(8), am=as.factor(0)))
predict(MPGModel, data.frame(wt=3, hp=3, cyl=as.factor(8), am=as.factor(1)))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
print("test")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(mtcars)
install.packages('stringr')
devtools::install_github('muschellij2/slidify')
library(slidify)
slidify("index.Rmd")
dir()
setwd("~/R/myFirstSlidifyDeck")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish(user = "EdwardLim", repo = "myFirstSlidifyDeck", host = 'github')
publish(user = "EdwardLim", repo = "myFirstSlidifyDeck", host = 'github')
publish(user = "EdwardLim", repo = "myFirstSlidifyDeck", host = 'github')
publish(user = "EdwardLim", repo = "myFirstSlidifyDeck", host = 'github')
publish(user = "EdwardLim", repo = "myFirstSlidifyDeck", host = 'github')
Sys.which('git')
